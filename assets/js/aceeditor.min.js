let aceeditorBasePath = "../assets/addons/aceeditor/vendor/aceeditor/", aceeditorScriptPath = aceeditorBasePath + "ace.js", aceeditorExtensionList = ["beautify", "language_tools", "whitespace"], loadAceeditorExtensions = () => new Promise((e, t) => { let o = []; aceeditorExtensionList.forEach(function (e) { o.push(loadAceeditorExtensionScript(e)) }), Promise.all(o).then(function () { e({ status: !0 }) }).catch(function (e) { t({ status: !1, message: "Failed to load the script " + e }) }) }), loadAceeditorExtensionScript = i => new Promise(function (t, o) { try { let e = document.createElement("script"); e.src = aceeditorBasePath + "ext-" + i + ".js", e.async = !1, e.onload = () => { t(i) }, e.onerror = () => { o(i) }, document.body.appendChild(e) } catch (e) { console.log(e) } }); function textAreaToAceEditor(e) { if (!e || "textarea" !== e.tagName.toLowerCase()) return console.warn("Addon aceeditor: Invalid Parameter for function textAreaToAceEditor()! Use only <textarea> as parameter!"), null; if ("true" === e.getAttribute("data-aceactive")) return null; let o = document.createElement("pre"); e.parentNode.insertBefore(o, e); let i = ace.edit(o); if (i.getSession().setValue(e.value), default_options = { showLineNumbers: !0, showGutter: !0, showInvisibles: !1, fontSize: 15, mode: "ace/mode/php" }, "object" == typeof rex) try { ace_options = JSON.parse(rex.aceeditor_options) } catch (e) { ace_options = default_options, console.warn("Addon aceeditor: Error in aceeditor-Options! Using minimum default configuration!\n" + e) } else ace_options = default_options; if (null !== e.getAttribute("readonly") && (i.setReadOnly(!0), i.keyBinding.$defaultHandler.commandKeyBinding = {}), add_options = e.getAttribute("aceeditor-options"), null !== add_options) { try { new_options = JSON.parse(add_options) } catch (e) { new_options = {}, console.warn("Addon aceeditor: Error in Attribute aceeditor-options! Options ignored!") } ace_options = Object.assign(ace_options, new_options) } var t, n, a, r; i.setOptions(ace_options), o.style.width = (t = e, n = i.getOptions().fontSize, t.classList.contains("rex-js-code") ? "100%" : null !== t.getAttribute("aceeditor-width") ? t.getAttribute("aceeditor-width") : null !== t.getAttribute("width") ? Number.isInteger(parseInt(t.getAttribute("width"))) ? t.getAttribute("width") + "px" : t.getAttribute("width") : null !== t.getAttribute("cols") ? (width = Number(Number(t.getAttribute("cols")) + 1) * (Number(n) / 1.5), width + "px") : (width = t.offsetWidth, width < 400 ? "100%" : width + "px")), o.style.height = (a = e, r = i.getOptions().fontSize, a.classList.contains("rex-js-code") ? "500px" : null !== a.getAttribute("aceeditor-height") ? a.getAttribute("aceeditor-height") : null !== a.getAttribute("height") ? Number.isInteger(parseInt(a.getAttribute("height"))) ? a.getAttribute("height") + "px" : a.getAttribute("height") : (null !== a.getAttribute("rows") ? height = 1.5 * Number(Number(a.getAttribute("rows")) + 1) * Number(r) : (height = a.offsetHeight, height < 200 && (height = 200)), height + "px")), e.style.display = "none", e.setAttribute("data-aceactive", "true"); let c = "eclipse"; "object" == typeof rex && (c = rex.aceeditor_defaulttheme); let d = !1; if ("object" == typeof rex) { let t = null; window.matchMedia && (t = window.matchMedia("(prefers-color-scheme: dark)"), t.matches && (c = rex.aceeditor_defaultdarktheme, d = !0), document.body.classList.contains("rex-theme-light") ? c = rex.aceeditor_defaulttheme : document.body.classList.contains("rex-theme-dark") && (c = rex.aceeditor_defaultdarktheme, d = !0), t.addEventListener("change", function (e) { t.matches ? (c = rex.aceeditor_defaultdarktheme, d = !0) : c = rex.aceeditor_defaulttheme, document.body.classList.contains("rex-theme-light") ? c = rex.aceeditor_defaulttheme : document.body.classList.contains("rex-theme-dark") && (c = rex.aceeditor_defaultdarktheme, d = !0) })) } var s = e.getAttribute("aceeditor-theme"); null !== s && (c = s), !0 === d && (c = rex.aceeditor_defaultdarktheme, null !== (s = e.getAttribute("aceeditor-themedark")) && (c = s)), i.setTheme("ace/theme/" + c); e = e.getAttribute("aceeditor-mode"); return null !== e && i.getSession().setMode("ace/mode/" + e), !0 === d ? i.container.classList.add("acerexdarkmode") : i.container.classList.add("acerexmode"), i.container.style.lineHeight = 1.5, i.renderer.updateFontSize(), i.commands.addCommand({ name: "fullScreenF11", bindKey: { win: "F11", mac: "F11" }, exec: function (e) { e.container.classList.toggle("acefullscreen"), document.querySelector("html").classList.toggle("acefullscreenhtml"), e.resize() } }), i.commands.addCommand({ name: "fullScreenESC", bindKey: { win: "ESC", mac: "ESC" }, exec: function (e) { e.container.classList.toggle("acefullscreen"), document.querySelector("html").classList.toggle("acefullscreenhtml"), e.resize() } }), aceeditorExtensionList.forEach(function (e) { e = ace.require("ace/ext/" + e); "object" == typeof e && "object" == typeof e.commands && i.commands.addCommands(e.commands) }), i.commands.addCommand({ name: "showKeyboardShortcuts", bindKey: { win: "Ctrl-Alt-h", mac: "Command-Alt-h" }, exec: function (t) { ace.config.loadModule("ace/ext/keybinding_menu", function (e) { e.init(t), t.showKeyboardShortcuts() }) } }), i.session.addEventListener("change", function (e) { let t = o.nextElementSibling; t.value = i.getSession().getValue() }), i } "function" == typeof $ && $(document).on("rex:ready", function () { var e, i = document.querySelectorAll(rex.aceeditor_selectors); 0 < i.length && ((e = document.createElement("script")).src = aceeditorScriptPath, e.async = !1, document.head.appendChild(e), e.onload = function () { loadAceeditorExtensions().then(e => { for (var t = 0; t < i.length; t++) { var o = i[t]; editor = textAreaToAceEditor(o) } }).catch(e => { console.error(e) }) }) });